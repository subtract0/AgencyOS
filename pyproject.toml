[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agency"
version = "1.0.0"
description = "Agency Code Agency - Multi-Agent Development System"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Agency Development Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.urls]
Homepage = "https://github.com/agency/agency"
Repository = "https://github.com/agency/agency"
Issues = "https://github.com/agency/agency/issues"

[tool.setuptools.packages.find]
include = ["agency*", "shared*", "core*", "*_agent*"]
exclude = ["tests*", "tmp*", "logs*", "data*", "plans*", "specs*", "demos*", "docker*", "patches*", "scratch*"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (slower, may need services)",
    "e2e: End-to-end tests (full system tests)",
    "asyncio: Async test functions",
    "slow: Tests that take longer than 10 seconds",
]
addopts = [
    "-v",                        # Verbose output
    "--strict-markers",          # Strict marker checking
    "--durations=10",           # Show 10 slowest tests
    "--tb=short",               # Short traceback format
    "--color=yes",              # Colored output
    "-m", "not integration and not e2e",  # Default: unit tests only
    "--maxfail=3",              # Stop after 3 failures for faster feedback
    "--disable-warnings",       # Reduce noise from warnings
]
filterwarnings = [
    "error",                    # Turn warnings into errors
    "ignore::UserWarning",      # But ignore user warnings
    "ignore::DeprecationWarning", # And deprecation warnings
]
timeout = 300                   # 5 minute timeout per test
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
log_cli = false                 # Don't show logs during normal runs
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Function is too complex (we'll handle this case by case)
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Use of assert in tests is OK
    "ARG",   # Unused function arguments in tests are OK
    "FBT",   # Boolean trap is OK in tests
]

[tool.ruff.isort]
known-first-party = ["agency", "shared", "tools"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.coverage.run]
source = [".", "shared", "tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
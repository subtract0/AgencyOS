[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agency"
version = "1.0.0"
description = "Agency Code Agency - Multi-Agent Development System"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Agency Development Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.urls]
Homepage = "https://github.com/agency/agency"
Repository = "https://github.com/agency/agency"
Issues = "https://github.com/agency/agency/issues"

[tool.setuptools.packages.find]
include = ["agency*", "shared*", "core*", "*_agent*"]
exclude = ["tests*", "tmp*", "logs*", "data*", "plans*", "specs*", "demos*", "docker*", "patches*", "scratch*"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (slower, may need services)",
    "e2e: End-to-end tests (full system tests)",
    "asyncio: Async test functions",
    "slow: Tests that take longer than 10 seconds",
]
addopts = [
    "-v",                        # Verbose output
    "--strict-markers",          # Strict marker checking
    "--durations=10",           # Show 10 slowest tests
    "--tb=short",               # Short traceback format
    "--color=yes",              # Colored output
    "-m", "not integration and not e2e",  # Default: unit tests only
    "--maxfail=3",              # Stop after 3 failures for faster feedback
    "--disable-warnings",       # Reduce noise from warnings
    "-n", "auto",               # Parallel execution with pytest-xdist
]
filterwarnings = [
    "error",                    # Turn warnings into errors
    "ignore::UserWarning",      # But ignore user warnings
    "ignore::DeprecationWarning", # And deprecation warnings
]
timeout = 300                   # 5 minute timeout per test
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
log_cli = false                 # Don't show logs during normal runs
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Function is too complex (we'll handle this case by case)
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Use of assert in tests is OK
    "ARG",   # Unused function arguments in tests are OK
    "FBT",   # Boolean trap is OK in tests
    "E402",  # Module imports (test setup patterns)
    "F401",  # Unused imports (checked for availability)
    "F841",  # Unused variables (test fixtures)
    "B007",  # Loop variables (intentional iteration)
    "B009",  # getattr patterns in tests
    "B010",  # setattr usage (test mocking)
    "B011",  # assert False patterns
    "B017",  # Blind except in tests (expected)
    "B028",  # stacklevel in warnings
    "B004",  # hasattr for callable (compatibility)
    "B905",  # zip strict (not critical in tests)
    "E712",  # True/False equality (explicit in tests)
    "E731",  # Lambda assignment (test shortcuts)
    "C401",  # Generator patterns in tests
    "C414",  # Unnecessary list calls
]
"tools/**/*.py" = [
    "E402",  # Module imports not at top (defer for tools refactor)
    "F401",  # Unused imports (checked imports for availability)
    "F841",  # Unused local variables (template/experimental code)
    "B007",  # Loop variable not used (intentional iteration)
    "E722",  # Bare except (legacy compatibility)
    "C401",  # Generator patterns (readability preference)
    "C414",  # Unnecessary list() in sorted()
    "E741",  # Ambiguous variable names (legacy code)
]
"shared/**/*.py" = [
    "E402",  # Module imports not at top (conditional imports for optional deps)
    "F841",  # Unused variables (WIP/experimental features)
    "B904",  # Exception chaining (legacy compatibility)
    "B905",  # zip strict parameter
    "B010",  # setattr patterns
    "C401",  # Generator comprehensions
    "UP007", # Union syntax compatibility
]
"demo*.py" = [
    "E402",  # Demo scripts have intentional import ordering
    "F841",  # Demos show examples, unused vars expected
]
"analyze_*.py" = [
    "F841",  # Analysis scripts may have unused intermediate vars
]
"deploy/**/*.py" = [
    "F401",  # Deployment scripts check optional dependencies
]
"dspy_agents/**/*.py" = [
    "E722",  # DSPy integration uses try/except patterns
    "F401",  # Optional DSPy imports
    "F841",  # Experimental agent code
    "B004",  # hasattr patterns for DSPy compatibility
    "B007",  # Loop variables in DSPy signatures
    "E741",  # Variable naming in DSPy learning patterns
    "UP007", # Union syntax for DSPy compatibility
]
"learning_agent/**/*.py" = [
    "E402",  # Conditional imports for learning modules
    "F401",  # Optional learning dependencies
    "F841",  # Intermediate learning variables
    "B007",  # Loop iteration patterns
    "C401",  # Generator patterns for learning data
]
"pattern_intelligence/**/*.py" = [
    "F841",  # Pattern extraction intermediate vars
    "B007",  # Pattern iteration loops
    "C401",  # Pattern comprehensions
]
"learning_loop/**/*.py" = [
    "F401",  # Optional loop dependencies
    "E402",  # Conditional module loading
    "F841",  # Loop state variables
    "B007",  # Pattern iteration
    "B904",  # Exception chains (legacy)
    "UP035", # Typing compatibility
]
"quality_enforcer_agent/**/*.py" = [
    "F401",  # Optional enforcer dependencies
    "B904",  # Exception patterns
]
"src/**/*.py" = [
    "F401",  # SDK optional imports
    "B904",  # Exception handling patterns
    "E402",  # Module loading order
]
"scripts/**/*.py" = [
    "F401",  # Validation scripts check imports
    "F841",  # Script intermediate variables
]
"dspy_audit/**/*.py" = [
    "F401",  # DSPy audit optional imports
]
"trinity_protocol/**/*.py" = [
    "F401",  # Trinity optional imports
    "E402",  # Trinity conditional initialization
    "F841",  # Trinity state variables
    "B007",  # Trinity loop patterns
    "B904",  # Trinity exception handling
    "C401",  # Trinity comprehensions
    "UP007", # Trinity Union syntax
]
"ui_development_agent/**/*.py" = [
    "F841",  # UI agent variables
    "F822",  # UI agent dynamic names
]
"test_*.py" = [
    "E402",  # Test module patterns
    "F841",  # Test variables
    "B007",  # Test loops
]
"launch_*.py" = [
    "F841",  # Launch script variables
]
"voice_*.py" = [
    "E722",  # Voice processing bare excepts
]
"*.py" = [
    "F821",  # Undefined names (dynamic/generated code)
]

[tool.ruff.isort]
known-first-party = ["agency", "shared", "tools"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.coverage.run]
source = [".", "shared", "tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
[tool.poetry.dependencies]
pydantic = "^2.11.9"

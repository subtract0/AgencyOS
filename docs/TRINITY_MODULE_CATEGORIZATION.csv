File,Lines,Category,Destination,Rationale,Dependencies,Test Coverage,Action
executor_agent.py,774,Production,core/executor.py,"Core execution coordinator, well-tested, production-critical","cost_tracker, foundation_verifier, models/project",85%,"Optimize to ~400 lines, ensure 100% tests"
architect_agent.py,729,Production,core/architect.py,"Core architecture planner, well-tested, production-critical","models/project, cost_tracker, preference_learner",90%,"Optimize to ~400 lines, ensure 100% tests"
witness_agent.py,318,Production,core/witness.py,"Pattern detection (production), ambient features moved to experimental","pattern_detector, models/patterns",75%,"Extract patterns only (~300 lines), 100% tests"
orchestrator.py,210,Production,core/orchestrator.py,"Trinity orchestration, production-ready","executor, architect, witness",80%,"Move as-is, ensure 100% tests"
foundation_verifier.py,382,Production,core/foundation_verifier.py,"CI/tests validation, production-critical","subprocess, git",70%,"Move to shared/ (generic), 100% tests"
cost_tracker.py,473,Reusable,shared/cost_tracker.py,"Generic cost tracking, used by multiple agents","SQLite, telemetry",80%,"Extract to shared/, add generic API"
cost_dashboard.py,626,Reusable,shared/cost_dashboard.py,"Cost visualization, reusable across agents","cost_tracker, plotly",60%,"Extract to shared/, consolidate with cost_dashboard_web.py"
cost_dashboard_web.py,656,Reusable,shared/cost_dashboard_web.py,"Web-based cost dashboard, reusable","cost_tracker, flask",50%,"Merge with cost_dashboard.py → shared/"
cost_alerts.py,612,Reusable,shared/cost_alerts.py,"Budget alerting, reusable","cost_tracker",40%,"Extract to shared/, add generic API"
human_review_queue.py,375,Reusable,shared/hitl_protocol.py,"HITL queue management, generic pattern","models/hitl",70%,"Extract to shared/hitl_protocol.py"
question_delivery.py,307,Reusable,shared/hitl_protocol.py,"HITL question delivery, generic pattern","models/hitl",60%,"Merge into shared/hitl_protocol.py"
preference_learning.py,253,Reusable,shared/preference_learning.py,"Generic preference engine, reusable","models/preferences",50%,"Extract to shared/, add generic API"
preference_store.py,397,Reusable,shared/preference_learning.py,"Preference storage, generic","SQLite, models/preferences",60%,"Merge into shared/preference_learning.py"
alex_preference_learner.py,609,Reusable,shared/preference_learning.py,"User-specific preference learner, make generic","preference_learning, preference_store",40%,"Remove Alex-specific hardcoding, merge to shared/"
pattern_detector.py,327,Reusable,shared/pattern_detector.py,"Generic pattern detection, reusable","models/patterns, telemetry",70%,"Extract to shared/, add pluggable detectors"
audio_capture.py,330,Experimental,experimental/audio_capture.py,"Microphone capture, privacy concerns, not production-critical","pyaudio (external)",0%,"Move to experimental/, mark EXPERIMENTAL"
ambient_listener_service.py,374,Experimental,experimental/ambient_listener.py,"Always-on listening, privacy concerns, experimental","audio_capture, whisper",0%,"Move to experimental/, mark EXPERIMENTAL"
whisper_transcriber.py,352,Experimental,experimental/whisper_transcriber.py,"Transcription service, requires whisper.cpp, experimental","whisper.cpp (external)",10%,"Move to experimental/, mark EXPERIMENTAL"
transcription_service.py,260,Experimental,experimental/transcription_service.py,"Transcription utilities, experimental","whisper_transcriber",10%,"Move to experimental/, mark EXPERIMENTAL"
witness_ambient_mode.py,540,Experimental,experimental/witness_ambient.py,"Ambient witness prototype, experimental","witness_agent, audio_capture",20%,"Move to experimental/, mark EXPERIMENTAL"
response_handler.py,298,Experimental,experimental/response_handler.py,"Ambient response handling, experimental","ambient_listener",15%,"Move to experimental/, mark EXPERIMENTAL"
demo_complete_trinity.py,242,Demo,demos/demo_complete.py,"Main Trinity demo, consolidate with others","executor, architect, witness",N/A,"Merge with demo_integration.py → demos/demo_complete.py"
demo_integration.py,277,Demo,demos/demo_complete.py,"Integration demo, consolidate","executor, architect",N/A,"Merge into demos/demo_complete.py"
test_dashboard_demo.py,339,Demo,demos/demo_complete.py,"Dashboard demo, consolidate","cost_dashboard, system_dashboard",N/A,"Merge into demos/demo_complete.py"
demo_hitl.py,328,Demo,demos/demo_hitl.py,"HITL demo, keep focused","human_review_queue, executor",N/A,"Keep as demos/demo_hitl.py, update imports"
demo_preference_learning.py,358,Demo,demos/demo_preferences.py,"Preference demo, keep focused","preference_learning, alex_preference_learner",N/A,"Keep as demos/demo_preferences.py, update imports"
demo_architect.py,247,Demo,DELETE,"Architect demo, redundant with demo_complete","architect_agent",N/A,"Verify no unique functionality, then delete"
test_executor_simple.py,158,Demo,DELETE,"Simple executor test, redundant","executor_agent",N/A,"Verify no unique functionality, then delete"
test_architect_simple.py,151,Demo,DELETE,"Simple architect test, redundant","architect_agent",N/A,"Verify no unique functionality, then delete"
run_24h_test.py,562,Demo,DELETE,"24-hour test, not production-critical","cost_tracker, event_simulator",N/A,"Verify no unique functionality, then delete"
run_8h_ui_test.py,68,Demo,DELETE,"8-hour UI test, not production-critical","cost_dashboard",N/A,"Verify no unique functionality, then delete"
verify_cost_tracking.py,136,Demo,DELETE,"Cost tracking verification, redundant","cost_tracker",N/A,"Verify no unique functionality, then delete"
generate_24h_report.py,587,Demo,DELETE,"24-hour report generation, not production-critical","cost_tracker",N/A,"Verify no unique functionality, then delete"
event_simulator.py,449,Utility,DELETE,"Event simulation for testing, not production-critical","message_bus",N/A,"Verify no production usage, then delete or move to tests/"
system_dashboard.py,221,Utility,DELETE,"System dashboard, redundant with cost_dashboard","cost_tracker, pattern_detector",N/A,"Verify no unique functionality, merge to cost_dashboard or delete"
pattern_dashboard.py,193,Utility,DELETE,"Pattern dashboard, redundant","pattern_detector",N/A,"Verify no unique functionality, merge to cost_dashboard or delete"
dashboard_cli.py,371,Utility,DELETE,"CLI dashboard, redundant","cost_dashboard",N/A,"Verify no unique functionality, delete"
budget_enforcer.py,242,Utility,core/budget_enforcer.py,"Budget enforcement, may be production-useful","cost_tracker",30%,"Evaluate: production core or delete if redundant"
project_initializer.py,386,Utility,DELETE,"Project initialization, may be redundant","models/project",20%,"Verify no unique functionality vs architect, delete if redundant"
project_executor.py,354,Utility,DELETE,"Project execution, redundant with executor_agent","executor_agent",40%,"Verify no unique functionality, delete if redundant"
spec_from_conversation.py,437,Utility,DELETE,"Spec from conversation, experimental feature","conversation_context",10%,"Evaluate: move to experimental or delete"
conversation_context.py,361,Utility,DELETE,"Conversation context management, may be redundant","message_bus",20%,"Verify no unique functionality, delete if redundant"
daily_checkin.py,352,Utility,DELETE,"Daily check-in, experimental feature","human_review_queue",5%,"Evaluate: move to experimental or delete"
message_bus.py,362,Utility,shared/message_bus.py,"Generic message bus, may be reusable","telemetry",50%,"Evaluate: extract to shared/ or delete if unused"
persistent_store.py,361,Utility,shared/persistent_store.py,"Generic persistence, may be reusable","SQLite",60%,"Evaluate: extract to shared/ or delete if unused"
autonomous.py,283,Utility,DELETE,"Autonomous execution, may be experimental","executor_agent",10%,"Evaluate: move to experimental or delete"
__init__.py,12,Infrastructure,trinity_protocol/__init__.py,"Package initialization","",N/A,"Update with backward compatibility layer"
models/__init__.py,?,Infrastructure,core/models/__init__.py,"Models package initialization","",N/A,"Move to core/models/"
models/project.py,604,Infrastructure,core/models/project.py,"Project data models, production-critical","pydantic",90%,"Move to core/models/, ensure 100% tests"
models/preferences.py,485,Infrastructure,core/models/preferences.py,"Preference models, production-critical","pydantic",80%,"Move to core/models/, ensure 100% tests"
models/patterns.py,?,Infrastructure,core/models/patterns.py,"Pattern models, production-critical","pydantic",75%,"Move to core/models/, ensure 100% tests"
models/hitl.py,?,Infrastructure,core/models/hitl.py,"HITL models, production-critical","pydantic",85%,"Move to core/models/, ensure 100% tests"
models/audio.py,?,Infrastructure,experimental/models/audio.py,"Audio models, experimental","pydantic",20%,"Move to experimental/models/ or delete if unused"
